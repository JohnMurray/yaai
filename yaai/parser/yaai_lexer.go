// Code generated from yaai/YaaiLexer.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 35, 239,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33,
	4, 34, 9, 34, 4, 35, 9, 35, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3,
	8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3,
	18, 7, 18, 169, 10, 18, 12, 18, 14, 18, 172, 11, 18, 3, 19, 3, 19, 3, 19,
	6, 19, 177, 10, 19, 13, 19, 14, 19, 178, 3, 20, 3, 20, 3, 20, 3, 20, 3,
	21, 6, 21, 186, 10, 21, 13, 21, 14, 21, 187, 3, 22, 3, 22, 3, 22, 3, 23,
	3, 23, 3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3, 27, 3,
	27, 3, 28, 3, 28, 3, 29, 3, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 32, 3, 32,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 34, 3, 34, 3, 34, 3, 34, 7, 34, 223, 10,
	34, 12, 34, 14, 34, 226, 11, 34, 3, 34, 3, 34, 3, 35, 6, 35, 231, 10, 35,
	13, 35, 14, 35, 232, 3, 35, 5, 35, 236, 10, 35, 3, 35, 3, 35, 2, 2, 36,
	3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23,
	13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 2, 39, 20, 41,
	21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59,
	30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 3, 2, 9, 4, 2, 67, 92, 99,
	124, 6, 2, 50, 59, 67, 92, 97, 97, 99, 124, 3, 2, 36, 36, 3, 2, 50, 59,
	4, 2, 11, 11, 34, 34, 4, 2, 12, 12, 15, 15, 3, 3, 61, 61, 2, 244, 2, 3,
	3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11,
	3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2,
	19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2,
	2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2,
	2, 2, 35, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2,
	2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51, 3,
	2, 2, 2, 2, 53, 3, 2, 2, 2, 2, 55, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 2, 59,
	3, 2, 2, 2, 2, 61, 3, 2, 2, 2, 2, 63, 3, 2, 2, 2, 2, 65, 3, 2, 2, 2, 2,
	67, 3, 2, 2, 2, 2, 69, 3, 2, 2, 2, 3, 71, 3, 2, 2, 2, 5, 77, 3, 2, 2, 2,
	7, 82, 3, 2, 2, 2, 9, 87, 3, 2, 2, 2, 11, 95, 3, 2, 2, 2, 13, 103, 3, 2,
	2, 2, 15, 108, 3, 2, 2, 2, 17, 115, 3, 2, 2, 2, 19, 120, 3, 2, 2, 2, 21,
	124, 3, 2, 2, 2, 23, 128, 3, 2, 2, 2, 25, 134, 3, 2, 2, 2, 27, 140, 3,
	2, 2, 2, 29, 145, 3, 2, 2, 2, 31, 152, 3, 2, 2, 2, 33, 159, 3, 2, 2, 2,
	35, 166, 3, 2, 2, 2, 37, 176, 3, 2, 2, 2, 39, 180, 3, 2, 2, 2, 41, 185,
	3, 2, 2, 2, 43, 189, 3, 2, 2, 2, 45, 192, 3, 2, 2, 2, 47, 194, 3, 2, 2,
	2, 49, 197, 3, 2, 2, 2, 51, 200, 3, 2, 2, 2, 53, 202, 3, 2, 2, 2, 55, 204,
	3, 2, 2, 2, 57, 206, 3, 2, 2, 2, 59, 208, 3, 2, 2, 2, 61, 210, 3, 2, 2,
	2, 63, 212, 3, 2, 2, 2, 65, 214, 3, 2, 2, 2, 67, 218, 3, 2, 2, 2, 69, 235,
	3, 2, 2, 2, 71, 72, 7, 99, 2, 2, 72, 73, 7, 101, 2, 2, 73, 74, 7, 118,
	2, 2, 74, 75, 7, 113, 2, 2, 75, 76, 7, 116, 2, 2, 76, 4, 3, 2, 2, 2, 77,
	78, 7, 104, 2, 2, 78, 79, 7, 119, 2, 2, 79, 80, 7, 112, 2, 2, 80, 81, 7,
	101, 2, 2, 81, 6, 3, 2, 2, 2, 82, 83, 7, 107, 2, 2, 83, 84, 7, 112, 2,
	2, 84, 85, 7, 107, 2, 2, 85, 86, 7, 118, 2, 2, 86, 8, 3, 2, 2, 2, 87, 88,
	7, 114, 2, 2, 88, 89, 7, 99, 2, 2, 89, 90, 7, 101, 2, 2, 90, 91, 7, 109,
	2, 2, 91, 92, 7, 99, 2, 2, 92, 93, 7, 105, 2, 2, 93, 94, 7, 103, 2, 2,
	94, 10, 3, 2, 2, 2, 95, 96, 7, 116, 2, 2, 96, 97, 7, 103, 2, 2, 97, 98,
	7, 101, 2, 2, 98, 99, 7, 103, 2, 2, 99, 100, 7, 107, 2, 2, 100, 101, 7,
	120, 2, 2, 101, 102, 7, 103, 2, 2, 102, 12, 3, 2, 2, 2, 103, 104, 7, 117,
	2, 2, 104, 105, 7, 103, 2, 2, 105, 106, 7, 110, 2, 2, 106, 107, 7, 104,
	2, 2, 107, 14, 3, 2, 2, 2, 108, 109, 7, 117, 2, 2, 109, 110, 7, 118, 2,
	2, 110, 111, 7, 116, 2, 2, 111, 112, 7, 119, 2, 2, 112, 113, 7, 101, 2,
	2, 113, 114, 7, 118, 2, 2, 114, 16, 3, 2, 2, 2, 115, 116, 7, 118, 2, 2,
	116, 117, 7, 123, 2, 2, 117, 118, 7, 114, 2, 2, 118, 119, 7, 103, 2, 2,
	119, 18, 3, 2, 2, 2, 120, 121, 7, 120, 2, 2, 121, 122, 7, 99, 2, 2, 122,
	123, 7, 116, 2, 2, 123, 20, 3, 2, 2, 2, 124, 125, 7, 107, 2, 2, 125, 126,
	7, 112, 2, 2, 126, 127, 7, 118, 2, 2, 127, 22, 3, 2, 2, 2, 128, 129, 7,
	107, 2, 2, 129, 130, 7, 112, 2, 2, 130, 131, 7, 118, 2, 2, 131, 132, 7,
	53, 2, 2, 132, 133, 7, 52, 2, 2, 133, 24, 3, 2, 2, 2, 134, 135, 7, 107,
	2, 2, 135, 136, 7, 112, 2, 2, 136, 137, 7, 118, 2, 2, 137, 138, 7, 56,
	2, 2, 138, 139, 7, 54, 2, 2, 139, 26, 3, 2, 2, 2, 140, 141, 7, 119, 2,
	2, 141, 142, 7, 107, 2, 2, 142, 143, 7, 112, 2, 2, 143, 144, 7, 118, 2,
	2, 144, 28, 3, 2, 2, 2, 145, 146, 7, 119, 2, 2, 146, 147, 7, 107, 2, 2,
	147, 148, 7, 112, 2, 2, 148, 149, 7, 118, 2, 2, 149, 150, 7, 53, 2, 2,
	150, 151, 7, 52, 2, 2, 151, 30, 3, 2, 2, 2, 152, 153, 7, 119, 2, 2, 153,
	154, 7, 107, 2, 2, 154, 155, 7, 112, 2, 2, 155, 156, 7, 118, 2, 2, 156,
	157, 7, 56, 2, 2, 157, 158, 7, 54, 2, 2, 158, 32, 3, 2, 2, 2, 159, 160,
	7, 117, 2, 2, 160, 161, 7, 118, 2, 2, 161, 162, 7, 116, 2, 2, 162, 163,
	7, 107, 2, 2, 163, 164, 7, 112, 2, 2, 164, 165, 7, 105, 2, 2, 165, 34,
	3, 2, 2, 2, 166, 170, 9, 2, 2, 2, 167, 169, 9, 3, 2, 2, 168, 167, 3, 2,
	2, 2, 169, 172, 3, 2, 2, 2, 170, 168, 3, 2, 2, 2, 170, 171, 3, 2, 2, 2,
	171, 36, 3, 2, 2, 2, 172, 170, 3, 2, 2, 2, 173, 174, 7, 94, 2, 2, 174,
	177, 7, 36, 2, 2, 175, 177, 10, 4, 2, 2, 176, 173, 3, 2, 2, 2, 176, 175,
	3, 2, 2, 2, 177, 178, 3, 2, 2, 2, 178, 176, 3, 2, 2, 2, 178, 179, 3, 2,
	2, 2, 179, 38, 3, 2, 2, 2, 180, 181, 7, 36, 2, 2, 181, 182, 5, 37, 19,
	2, 182, 183, 7, 36, 2, 2, 183, 40, 3, 2, 2, 2, 184, 186, 9, 5, 2, 2, 185,
	184, 3, 2, 2, 2, 186, 187, 3, 2, 2, 2, 187, 185, 3, 2, 2, 2, 187, 188,
	3, 2, 2, 2, 188, 42, 3, 2, 2, 2, 189, 190, 7, 60, 2, 2, 190, 191, 7, 63,
	2, 2, 191, 44, 3, 2, 2, 2, 192, 193, 7, 63, 2, 2, 193, 46, 3, 2, 2, 2,
	194, 195, 7, 45, 2, 2, 195, 196, 7, 63, 2, 2, 196, 48, 3, 2, 2, 2, 197,
	198, 7, 47, 2, 2, 198, 199, 7, 63, 2, 2, 199, 50, 3, 2, 2, 2, 200, 201,
	7, 125, 2, 2, 201, 52, 3, 2, 2, 2, 202, 203, 7, 127, 2, 2, 203, 54, 3,
	2, 2, 2, 204, 205, 7, 42, 2, 2, 205, 56, 3, 2, 2, 2, 206, 207, 7, 43, 2,
	2, 207, 58, 3, 2, 2, 2, 208, 209, 7, 48, 2, 2, 209, 60, 3, 2, 2, 2, 210,
	211, 7, 45, 2, 2, 211, 62, 3, 2, 2, 2, 212, 213, 7, 47, 2, 2, 213, 64,
	3, 2, 2, 2, 214, 215, 9, 6, 2, 2, 215, 216, 3, 2, 2, 2, 216, 217, 8, 33,
	2, 2, 217, 66, 3, 2, 2, 2, 218, 219, 7, 49, 2, 2, 219, 220, 7, 49, 2, 2,
	220, 224, 3, 2, 2, 2, 221, 223, 10, 7, 2, 2, 222, 221, 3, 2, 2, 2, 223,
	226, 3, 2, 2, 2, 224, 222, 3, 2, 2, 2, 224, 225, 3, 2, 2, 2, 225, 227,
	3, 2, 2, 2, 226, 224, 3, 2, 2, 2, 227, 228, 8, 34, 3, 2, 228, 68, 3, 2,
	2, 2, 229, 231, 9, 7, 2, 2, 230, 229, 3, 2, 2, 2, 231, 232, 3, 2, 2, 2,
	232, 230, 3, 2, 2, 2, 232, 233, 3, 2, 2, 2, 233, 236, 3, 2, 2, 2, 234,
	236, 9, 8, 2, 2, 235, 230, 3, 2, 2, 2, 235, 234, 3, 2, 2, 2, 236, 237,
	3, 2, 2, 2, 237, 238, 8, 35, 4, 2, 238, 70, 3, 2, 2, 2, 10, 2, 170, 176,
	178, 187, 224, 232, 235, 5, 8, 2, 2, 2, 3, 2, 4, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'actor'", "'func'", "'init'", "'package'", "'receive'", "'self'",
	"'struct'", "'type'", "'var'", "'int'", "'int32'", "'int64'", "'uint'",
	"'uint32'", "'uint64'", "'string'", "", "", "", "':='", "'='", "'+='",
	"'-='", "'{'", "'}'", "'('", "')'", "'.'", "'+'", "'-'",
}

var lexerSymbolicNames = []string{
	"", "ACTOR", "FUNC", "INIT", "PACKAGE", "RECEIVE", "SELF", "STRUCT", "TYPE",
	"VAR", "T_INT", "T_INT32", "T_INT64", "T_UINT", "T_UINT32", "T_UINT64",
	"T_STRING", "IDENTIFIER", "STRING_LITERAL", "NUMERIC_LITERAL", "VAR_INITIALIZER",
	"ASSIGNMENT", "PLUS_EQUAL", "MINUS_EQUAL", "L_BRACKET", "R_BRACKET", "L_PAREN",
	"R_PAREN", "DOT", "PLUG", "MINUS", "NB_WS", "LINE_COMMENT", "EOS",
}

var lexerRuleNames = []string{
	"ACTOR", "FUNC", "INIT", "PACKAGE", "RECEIVE", "SELF", "STRUCT", "TYPE",
	"VAR", "T_INT", "T_INT32", "T_INT64", "T_UINT", "T_UINT32", "T_UINT64",
	"T_STRING", "IDENTIFIER", "STRING_BODY", "STRING_LITERAL", "NUMERIC_LITERAL",
	"VAR_INITIALIZER", "ASSIGNMENT", "PLUS_EQUAL", "MINUS_EQUAL", "L_BRACKET",
	"R_BRACKET", "L_PAREN", "R_PAREN", "DOT", "PLUG", "MINUS", "NB_WS", "LINE_COMMENT",
	"EOS",
}

type YaaiLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewYaaiLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *YaaiLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewYaaiLexer(input antlr.CharStream) *YaaiLexer {
	l := new(YaaiLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "YaaiLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// YaaiLexer tokens.
const (
	YaaiLexerACTOR           = 1
	YaaiLexerFUNC            = 2
	YaaiLexerINIT            = 3
	YaaiLexerPACKAGE         = 4
	YaaiLexerRECEIVE         = 5
	YaaiLexerSELF            = 6
	YaaiLexerSTRUCT          = 7
	YaaiLexerTYPE            = 8
	YaaiLexerVAR             = 9
	YaaiLexerT_INT           = 10
	YaaiLexerT_INT32         = 11
	YaaiLexerT_INT64         = 12
	YaaiLexerT_UINT          = 13
	YaaiLexerT_UINT32        = 14
	YaaiLexerT_UINT64        = 15
	YaaiLexerT_STRING        = 16
	YaaiLexerIDENTIFIER      = 17
	YaaiLexerSTRING_LITERAL  = 18
	YaaiLexerNUMERIC_LITERAL = 19
	YaaiLexerVAR_INITIALIZER = 20
	YaaiLexerASSIGNMENT      = 21
	YaaiLexerPLUS_EQUAL      = 22
	YaaiLexerMINUS_EQUAL     = 23
	YaaiLexerL_BRACKET       = 24
	YaaiLexerR_BRACKET       = 25
	YaaiLexerL_PAREN         = 26
	YaaiLexerR_PAREN         = 27
	YaaiLexerDOT             = 28
	YaaiLexerPLUG            = 29
	YaaiLexerMINUS           = 30
	YaaiLexerNB_WS           = 31
	YaaiLexerLINE_COMMENT    = 32
	YaaiLexerEOS             = 33
)
