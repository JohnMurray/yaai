// Code generated from yaai/YaaiLexer.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 28, 203,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 7, 16, 145, 10,
	16, 12, 16, 14, 16, 148, 11, 16, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3,
	19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3, 22, 3, 22, 3, 23, 6, 23, 164,
	10, 23, 13, 23, 14, 23, 165, 3, 24, 3, 24, 3, 24, 6, 24, 171, 10, 24, 13,
	24, 14, 24, 172, 3, 25, 3, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 27, 3, 27, 3, 27, 3, 27, 7, 27, 187, 10, 27, 12, 27, 14, 27, 190, 11,
	27, 3, 27, 3, 27, 3, 28, 6, 28, 195, 10, 28, 13, 28, 14, 28, 196, 3, 28,
	5, 28, 200, 10, 28, 3, 28, 3, 28, 2, 2, 29, 3, 3, 5, 4, 7, 5, 9, 6, 11,
	7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16,
	31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23, 45, 24, 47, 2,
	49, 25, 51, 26, 53, 27, 55, 28, 3, 2, 9, 4, 2, 67, 92, 99, 124, 6, 2, 50,
	59, 67, 92, 97, 97, 99, 124, 3, 2, 50, 59, 3, 2, 36, 36, 4, 2, 11, 11,
	34, 34, 4, 2, 12, 12, 15, 15, 3, 3, 61, 61, 2, 208, 2, 3, 3, 2, 2, 2, 2,
	5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2,
	13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2,
	2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2,
	2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2,
	2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3,
	2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51, 3, 2, 2, 2, 2, 53,
	3, 2, 2, 2, 2, 55, 3, 2, 2, 2, 3, 57, 3, 2, 2, 2, 5, 63, 3, 2, 2, 2, 7,
	68, 3, 2, 2, 2, 9, 76, 3, 2, 2, 2, 11, 84, 3, 2, 2, 2, 13, 91, 3, 2, 2,
	2, 15, 96, 3, 2, 2, 2, 17, 100, 3, 2, 2, 2, 19, 104, 3, 2, 2, 2, 21, 110,
	3, 2, 2, 2, 23, 116, 3, 2, 2, 2, 25, 121, 3, 2, 2, 2, 27, 128, 3, 2, 2,
	2, 29, 135, 3, 2, 2, 2, 31, 142, 3, 2, 2, 2, 33, 149, 3, 2, 2, 2, 35, 152,
	3, 2, 2, 2, 37, 154, 3, 2, 2, 2, 39, 156, 3, 2, 2, 2, 41, 158, 3, 2, 2,
	2, 43, 160, 3, 2, 2, 2, 45, 163, 3, 2, 2, 2, 47, 170, 3, 2, 2, 2, 49, 174,
	3, 2, 2, 2, 51, 178, 3, 2, 2, 2, 53, 182, 3, 2, 2, 2, 55, 199, 3, 2, 2,
	2, 57, 58, 7, 99, 2, 2, 58, 59, 7, 101, 2, 2, 59, 60, 7, 118, 2, 2, 60,
	61, 7, 113, 2, 2, 61, 62, 7, 116, 2, 2, 62, 4, 3, 2, 2, 2, 63, 64, 7, 107,
	2, 2, 64, 65, 7, 112, 2, 2, 65, 66, 7, 107, 2, 2, 66, 67, 7, 118, 2, 2,
	67, 6, 3, 2, 2, 2, 68, 69, 7, 114, 2, 2, 69, 70, 7, 99, 2, 2, 70, 71, 7,
	101, 2, 2, 71, 72, 7, 109, 2, 2, 72, 73, 7, 99, 2, 2, 73, 74, 7, 105, 2,
	2, 74, 75, 7, 103, 2, 2, 75, 8, 3, 2, 2, 2, 76, 77, 7, 116, 2, 2, 77, 78,
	7, 103, 2, 2, 78, 79, 7, 101, 2, 2, 79, 80, 7, 103, 2, 2, 80, 81, 7, 107,
	2, 2, 81, 82, 7, 120, 2, 2, 82, 83, 7, 103, 2, 2, 83, 10, 3, 2, 2, 2, 84,
	85, 7, 117, 2, 2, 85, 86, 7, 118, 2, 2, 86, 87, 7, 116, 2, 2, 87, 88, 7,
	119, 2, 2, 88, 89, 7, 101, 2, 2, 89, 90, 7, 118, 2, 2, 90, 12, 3, 2, 2,
	2, 91, 92, 7, 118, 2, 2, 92, 93, 7, 123, 2, 2, 93, 94, 7, 114, 2, 2, 94,
	95, 7, 103, 2, 2, 95, 14, 3, 2, 2, 2, 96, 97, 7, 120, 2, 2, 97, 98, 7,
	99, 2, 2, 98, 99, 7, 116, 2, 2, 99, 16, 3, 2, 2, 2, 100, 101, 7, 107, 2,
	2, 101, 102, 7, 112, 2, 2, 102, 103, 7, 118, 2, 2, 103, 18, 3, 2, 2, 2,
	104, 105, 7, 107, 2, 2, 105, 106, 7, 112, 2, 2, 106, 107, 7, 118, 2, 2,
	107, 108, 7, 53, 2, 2, 108, 109, 7, 52, 2, 2, 109, 20, 3, 2, 2, 2, 110,
	111, 7, 107, 2, 2, 111, 112, 7, 112, 2, 2, 112, 113, 7, 118, 2, 2, 113,
	114, 7, 56, 2, 2, 114, 115, 7, 54, 2, 2, 115, 22, 3, 2, 2, 2, 116, 117,
	7, 119, 2, 2, 117, 118, 7, 107, 2, 2, 118, 119, 7, 112, 2, 2, 119, 120,
	7, 118, 2, 2, 120, 24, 3, 2, 2, 2, 121, 122, 7, 119, 2, 2, 122, 123, 7,
	107, 2, 2, 123, 124, 7, 112, 2, 2, 124, 125, 7, 118, 2, 2, 125, 126, 7,
	53, 2, 2, 126, 127, 7, 52, 2, 2, 127, 26, 3, 2, 2, 2, 128, 129, 7, 119,
	2, 2, 129, 130, 7, 107, 2, 2, 130, 131, 7, 112, 2, 2, 131, 132, 7, 118,
	2, 2, 132, 133, 7, 56, 2, 2, 133, 134, 7, 54, 2, 2, 134, 28, 3, 2, 2, 2,
	135, 136, 7, 117, 2, 2, 136, 137, 7, 118, 2, 2, 137, 138, 7, 116, 2, 2,
	138, 139, 7, 107, 2, 2, 139, 140, 7, 112, 2, 2, 140, 141, 7, 105, 2, 2,
	141, 30, 3, 2, 2, 2, 142, 146, 9, 2, 2, 2, 143, 145, 9, 3, 2, 2, 144, 143,
	3, 2, 2, 2, 145, 148, 3, 2, 2, 2, 146, 144, 3, 2, 2, 2, 146, 147, 3, 2,
	2, 2, 147, 32, 3, 2, 2, 2, 148, 146, 3, 2, 2, 2, 149, 150, 7, 60, 2, 2,
	150, 151, 7, 63, 2, 2, 151, 34, 3, 2, 2, 2, 152, 153, 7, 63, 2, 2, 153,
	36, 3, 2, 2, 2, 154, 155, 7, 125, 2, 2, 155, 38, 3, 2, 2, 2, 156, 157,
	7, 127, 2, 2, 157, 40, 3, 2, 2, 2, 158, 159, 7, 42, 2, 2, 159, 42, 3, 2,
	2, 2, 160, 161, 7, 43, 2, 2, 161, 44, 3, 2, 2, 2, 162, 164, 9, 4, 2, 2,
	163, 162, 3, 2, 2, 2, 164, 165, 3, 2, 2, 2, 165, 163, 3, 2, 2, 2, 165,
	166, 3, 2, 2, 2, 166, 46, 3, 2, 2, 2, 167, 168, 7, 94, 2, 2, 168, 171,
	7, 36, 2, 2, 169, 171, 10, 5, 2, 2, 170, 167, 3, 2, 2, 2, 170, 169, 3,
	2, 2, 2, 171, 172, 3, 2, 2, 2, 172, 170, 3, 2, 2, 2, 172, 173, 3, 2, 2,
	2, 173, 48, 3, 2, 2, 2, 174, 175, 7, 36, 2, 2, 175, 176, 5, 47, 24, 2,
	176, 177, 7, 36, 2, 2, 177, 50, 3, 2, 2, 2, 178, 179, 9, 6, 2, 2, 179,
	180, 3, 2, 2, 2, 180, 181, 8, 26, 2, 2, 181, 52, 3, 2, 2, 2, 182, 183,
	7, 49, 2, 2, 183, 184, 7, 49, 2, 2, 184, 188, 3, 2, 2, 2, 185, 187, 10,
	7, 2, 2, 186, 185, 3, 2, 2, 2, 187, 190, 3, 2, 2, 2, 188, 186, 3, 2, 2,
	2, 188, 189, 3, 2, 2, 2, 189, 191, 3, 2, 2, 2, 190, 188, 3, 2, 2, 2, 191,
	192, 8, 27, 3, 2, 192, 54, 3, 2, 2, 2, 193, 195, 9, 7, 2, 2, 194, 193,
	3, 2, 2, 2, 195, 196, 3, 2, 2, 2, 196, 194, 3, 2, 2, 2, 196, 197, 3, 2,
	2, 2, 197, 200, 3, 2, 2, 2, 198, 200, 9, 8, 2, 2, 199, 194, 3, 2, 2, 2,
	199, 198, 3, 2, 2, 2, 200, 201, 3, 2, 2, 2, 201, 202, 8, 28, 4, 2, 202,
	56, 3, 2, 2, 2, 10, 2, 146, 165, 170, 172, 188, 196, 199, 5, 8, 2, 2, 2,
	3, 2, 4, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'actor'", "'init'", "'package'", "'receive'", "'struct'", "'type'",
	"'var'", "'int'", "'int32'", "'int64'", "'uint'", "'uint32'", "'uint64'",
	"'string'", "", "':='", "'='", "'{'", "'}'", "'('", "')'",
}

var lexerSymbolicNames = []string{
	"", "ACTOR", "INIT", "PACKAGE", "RECEIVE", "STRUCT", "TYPE", "VAR", "T_INT",
	"T_INT32", "T_INT64", "T_UINT", "T_UINT32", "T_UINT64", "T_STRING", "IDENTIFIER",
	"VAR_INITIALIZER", "ASSIGNMENT", "L_BRACKET", "R_BRACKET", "L_PAREN", "R_PAREN",
	"NUMERIC_LITERAL", "STRING_LITERAL", "NB_WS", "LINE_COMMENT", "EOS",
}

var lexerRuleNames = []string{
	"ACTOR", "INIT", "PACKAGE", "RECEIVE", "STRUCT", "TYPE", "VAR", "T_INT",
	"T_INT32", "T_INT64", "T_UINT", "T_UINT32", "T_UINT64", "T_STRING", "IDENTIFIER",
	"VAR_INITIALIZER", "ASSIGNMENT", "L_BRACKET", "R_BRACKET", "L_PAREN", "R_PAREN",
	"NUMERIC_LITERAL", "STRING_BODY", "STRING_LITERAL", "NB_WS", "LINE_COMMENT",
	"EOS",
}

type YaaiLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewYaaiLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *YaaiLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewYaaiLexer(input antlr.CharStream) *YaaiLexer {
	l := new(YaaiLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "YaaiLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// YaaiLexer tokens.
const (
	YaaiLexerACTOR           = 1
	YaaiLexerINIT            = 2
	YaaiLexerPACKAGE         = 3
	YaaiLexerRECEIVE         = 4
	YaaiLexerSTRUCT          = 5
	YaaiLexerTYPE            = 6
	YaaiLexerVAR             = 7
	YaaiLexerT_INT           = 8
	YaaiLexerT_INT32         = 9
	YaaiLexerT_INT64         = 10
	YaaiLexerT_UINT          = 11
	YaaiLexerT_UINT32        = 12
	YaaiLexerT_UINT64        = 13
	YaaiLexerT_STRING        = 14
	YaaiLexerIDENTIFIER      = 15
	YaaiLexerVAR_INITIALIZER = 16
	YaaiLexerASSIGNMENT      = 17
	YaaiLexerL_BRACKET       = 18
	YaaiLexerR_BRACKET       = 19
	YaaiLexerL_PAREN         = 20
	YaaiLexerR_PAREN         = 21
	YaaiLexerNUMERIC_LITERAL = 22
	YaaiLexerSTRING_LITERAL  = 23
	YaaiLexerNB_WS           = 24
	YaaiLexerLINE_COMMENT    = 25
	YaaiLexerEOS             = 26
)
